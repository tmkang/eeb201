{
    "contents" : "#Additional in class excercises for R bootcamp:\n#EEB 201, September 17, 2015\n#Kirk Lohmueller\n\n\n################# BEFORE BEGINNING: ######################\n\n# First we'll load in a matrix of genotype data\n\n# Copy the data files into a directory you will work in for this part of the course.\n# Recommendation:  work/eebQuantIntro/Rintro/\n\n# Set working directory:\n#change this to whatever you want\nsetwd(\"~/Dropbox/Kirk_stuff/KEL_bootcamp/2014\")\n\n# Load a data set\nsnpsDataFrame=read.table('hapmap_CEU_r23a_chr2_ld-1.txt',header=TRUE)\n\n# What are the dimensions of the data?\ndim(snpsDataFrame)\n\n\n# Let's look at the top (or head) of the data set:\nhead(snpsDataFrame)\n\n# Note:  If A is the more common allele and B is the more rare allele (i.e. major and minor alleles, repsectively)\n#        Then, AA= 0,  AB= 1, BB = 2\n\n\n# What are the column names? \nnames(snpsDataFrame)\n\n# What are the row names? \nrow.names(snpsDataFrame)\n\n# Because the data are really just a large numeric matrix, we convert the dataframe to a matrix:\nsnps=as.matrix(snpsDataFrame)\n\n################### LOOKING CLOSELY AT ONE SNP #######################\n\n# With row names we can easily extract certain SNPs using the id's\ntestSNP=snps[\"rs218206_G\",]\n\ntable(testSNP)\n\n# What is proportion of heterozygotes at this locus?\nhet=sum(testSNP==1)/length(testSNP)\n\n# What if there is missing data?\ntestSNP=snps[\"rs6717613_A\",]\n\n# Try these commands\ntable(testSNP)\ntestSNP==1\nlength(testSNP)\nis.na(testSNP)\n\n# Now let's compute the observed heterozygosity\nhet=sum(testSNP==1)/length(testSNP)  # Note how this fails\nhet=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))  # but this doesn't \n\n\n###### EXPLORATORY PLOT OF SNP ALLELE FREQUENCY VS. OBSERVED HETEROZYGOSITY #####\n\n# To inspect the data, let's compute the frequency of each SNP and compare it \n# to the observed heterozygosity (i.e. the proportion of individuals who are heterozygotes)\n\n# What is the frequency of the minor allele?\nfreq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))\n\n# Now, let's define functions that do this for a generic set of SNP data\ncalc_freq=function(x){\n\treturn(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))\n}\n\ncalc_het=function(x){\n\treturn(sum(x==1,na.rm=TRUE)/(sum(!is.na(x))))\n}\n\n# And now let's apply the functions to each and every SNP\nfreq=apply(snps,1,calc_freq)\nhet=apply(snps,1,calc_het)\n\n# And now we can make exploratory plots\nplot(freq,het,xlab=\"Frequency\",ylab=\"Heterozygosity\")  # Scatter plot\n\n# Let's add a line to show what relationship we'd expect under Hardy-Weinberg expectations\np=seq(0,0.5,by=0.05)   # Set-up a vector with a sequence of allele frequencies\npoints(p,2*p*(1-p),type=\"l\",col=2) # Plot the HW expectation as a line in red\n\n\n## APPYLING A CHI-SQUARE TEST TO EACH SNP TO FORMALLY LOOK FOR DEPARTURES FROM HARDY-WEINBERG EXPECTATIONS ###\n\ncompute_chisquare=function(x){\n\tfreq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))\n\tcnt0=sum(x==0,na.rm=TRUE)\n\tcnt1=sum(x==1,na.rm=TRUE)\n\tcnt2=sum(x==2,na.rm=TRUE)\n\tobscnts=c(cnt0,cnt1,cnt2)\n\t#print(obscnts)\n\tn=sum(obscnts)\n\texpcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n\n\tchisq=sum((obscnts-expcnts)^2/expcnts)\n\treturn(chisq)\n}\n\n#let's make a second funtion that makes use of R's built in chisq.test function\n\ncompute_chisquare_2=function(x){\n\tfreq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))\n\tcnt0=sum(x==0,na.rm=TRUE)\n\tcnt1=sum(x==1,na.rm=TRUE)\n\tcnt2=sum(x==2,na.rm=TRUE)\n\tobscnts=c(cnt0,cnt1,cnt2)\n\t#print(obscnts)\n\tn=sum(obscnts)\n\t#here we use the built-in function for the chi-sq distribution:\n\texp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n\n\tchisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic\n\treturn(chisq)\n}\n\n\n\n\n# Apply the compute_chi_square function to each snp\nchisqs=apply(snps,1,compute_chisquare)\nchisqs2=apply(snps,1,compute_chisquare_2)\n\n#check to see that the chisquare statistcs are the same:\n#first do this by computing Pearson's correlation coefficient:\ncor.test(chisqs,chisqs2)\n\n#we can also do a quick scatterplot:\nplot(chisqs,chisqs2)\n\n# Compute p-values for each chi-square value using the pchisq function\npvals=pchisq(chisqs,1,lower.tail=FALSE)\n\n\n\n# Count the number of pvals smaller than the significance threshold\nsignifthres<-0.05\nsum(pvals<signifthres) \nmean(pvals<signifthres) \n\n#which SNPs?\nsig_snps<-subset(pvals,pvals<0.05) #pull out the snps with P-vals<0.05\nsig_snp_ids<-names(sig_snps)\n\n\n#now pull out the genotypes for all teh significant SNPs:\nsig_geno<-snps[sig_snp_ids,]\n\n#sig_geno is a matrix that has all the genotypes for the 181 SNPs with a P-value<0.05\n\n###################### PLAYING \"FIND-THE-SNP\" ##########################\n################################################PROBABLY WON'T GET THIS FAR!\n\n\n# In this section, we will read in data that provides a phenotype for each individual, and \n# then search our list of \n\n# Read in phenotype data file\nz=read.table(\"pheno.sim.2014.txt\",header=TRUE)\n# Extract the glucose level column as our phenotype of interest\npheno=z$glucose_mmolperL\n# Check length is equal to number of individuals\nlength(pheno)\n# Plot histogram\nhist(pheno)\n\n# Fit a linear model where the genotype is a single categorical variable (equivalent to one-way anova)\ngenofactor=factor(snps[\"rs218206_G\",])\nm=lm(pheno~genofactor)\nsummary(m)\n# Make a plot of the phenotype as a function of the categorical variable \nplot(pheno~factor(snps[\"rs218206_G\",]))  # Note: plot automatically produces a boxplot\n\n# Write a function to return the Ftest pvalue from the one-way anova\ncalc_Ftest_pval=function(geno){\n\tm=lm(pheno~factor(geno))\n\tfstat=summary(m)$fstatistic\n\tpval=pf(fstat[1],fstat[2],fstat[3],lower.tail=FALSE)\n\treturn(pval)\n}\n\n# Apply to all SNPs (may be slow)\npvals=apply(snps,1,calc_Ftest_pval)\n\n# Make a \"Manhattan plot\"  \nplot(-log10(pvals),pch=16,main=\"Genome-wide association scan results\")\n\n# Note: with Bonferroni correction - singificance treshold is roughly 10^-5 or ~5 on -log10 scale.\n# Add a line to show significance threshold\nabline(h=5,col=2)\nlog_pval<-(-log10(pvals))\n\n#now get the SNPs that are more significant than the threshold:\nbest_hit_snp<-names(subset(log_pval,log_pval>5))\n#now get teh -log10 pvalue\nsubset(log_pval,log_pval>5)\n\n# Look at the results for the best hit SNP more carefully to confirm the result\nm=lm(pheno~factor(snps[best_hit_snp,]))\nplot(pheno~factor(snps[best_hit_snp,]))  # Note: plot automatically produces a boxplot\nsummary(m)\n\n\n######################################################################\n",
    "created" : 1442515354668.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1463816980",
    "id" : "E3FD3054",
    "lastKnownWriteTime" : 1442550975,
    "path" : "~/Desktop/eeb201/AnalyzeSNPdata.2015.student.R",
    "project_path" : "AnalyzeSNPdata.2015.student.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}